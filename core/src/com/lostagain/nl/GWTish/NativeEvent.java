
package com.lostagain.nl.GWTish;



/**
 * The native emulated-dom event.
 * This is somewhat close to GWT NativeEvent to help compatibility, but 
 * is implemented different and similarities cant be relied upon.
 * One difference is the button press handeling. GWT used bitfields for some old IE compatibility thing.
 * 
 */
public class NativeEvent {

//  /**
//   * The left mouse button.
 //  */
  //public static final int BUTTON_LEFT = 1;

 // /**
 //  * The middle mouse button.
 //  */
  //public static final int BUTTON_MIDDLE = 4;

 // /**
 //  * The right mouse button.
 //  */
  //public static final int BUTTON_RIGHT = 2;

	
	//just use a enum instead
	static public enum EventButtonType {
		None,
		Left,
		Right,
		Middle //not yet used
	}
	
	protected EventButtonType ButtonTypeDown =EventButtonType.None;
	/**
	 * The last mouse button that was pressed
	 */
	static protected EventButtonType LastButtonTypeThatWasDown = EventButtonType.None;
	
  /**
   * Required constructor for GWT compiler to function.
   */
  protected NativeEvent() {
  }

  //Data
  /**
   * Should be set when the event was created
   * NOT SUPPORTED YET
   */
  boolean AltKeyWasPressed = false;
  /**
   * Should be set when the event was created
   * NOT SUPPORTED YET
   */
  boolean CntrKeyWasPressed = false;
  /**
   * Should be set when the event was created
   * NOT SUPPORTED YET
   */
  boolean ShiftKeyWasPressed = false;
  
  /** 2D screen-relative x */
  int CurrentEventX = 0;
  /** 2D screen-relative y */
  int CurrentEventY = 0;
  
  
  
/**
   * Should be set when the event was created
   * NOT SUPPORTED YET
   */
  int CurrentEventKeyCode = 0;
  
  /**
   * Gets whether the ALT key was depressed when the given event occurred.
   * 
   * @return <code>true</code> if ALT was depressed when the event occurred
   */
  public final boolean getAltKey() {
    return AltKeyWasPressed;
  }

  /**
   * Gets the mouse button that was depressed when the given event occurred.<br>
   * Note; ClickEvents are triggered on mouse up or finger released.<br>
   * Therefor nothing is "currently" pressed when that happens and this will return NONE.<br>
   * Use the getLastPressedMouseButton() function instead to work out if it was a left or right click.<br>
   * @return 
   */
  public final EventButtonType getMouseButton() {	  
    return ButtonTypeDown;
  }


  /**
   * Gets the mouse button that was depressed when the given event occurred.
   * @return 
   */
  static public final EventButtonType getLastPressedMouseButton() {	  
    return LastButtonTypeThatWasDown;
  }

  /**
   * Get an array of touches which have changed since the last touch event.
   * NOT SUPPORTED YET
   * @return array of touches which have changed since the last touch event
   */
  //public final ArrayList<Touch> getChangedTouches() {
  //  return DOMImpl.impl.getChangedTouches(this);
  //}

  /**
   * Gets the Unicode codepoint of the character generated by this key event.
   * NOT SUPPORTED YET
   * @return the Unicode codepoint.
   */
  public final int getCharCode() {
    return 0;
  }

  /**
   * Gets the mouse x-position within the browser window's client area.
   * Implementation work in progress
   * 
   * @return the mouse x-position
   */
  public final int getClientX() {
    return CurrentEventX;
  }

  /**
   * Gets the mouse y-position within the browser window's client area.
   * Implementation work in progress
   * 
   * @return the mouse y-position
   */
  public final int getClientY() {
    return CurrentEventY;
  }

  /**
   * Gets whether the CTRL key was depressed when the given event occurred.
   *  NOT SUPPORTED YET
   *  
   * @return <code>true</code> if CTRL was depressed when the event occurred
   */
  public final boolean getCtrlKey() {
    return CntrKeyWasPressed;
  }

  /**
   * Gets the current target element of this event. This is the element whose
   * listener fired last, not the element which fired the event initially.
   * NOT SUPPORTED YET
   * 
   * @return the event's current target element
   */
  //public final EventTarget getCurrentEventTarget() {
   // return DOMImpl.impl.eventGetCurrentTarget(this);
  //}

  /**
   * Get the {@link DataTransfer} associated with the current drag event.
   * NOT SUPPORTED YET
   * @return the {@link DataTransfer} object, or null if not a drag event
   */
  //public final native DataTransfer getDataTransfer() /*-{
  //  return this.dataTransfer || null;
  //}-*/;

  /**
   * Returns the element that was the actual target of the given event.
   * NOT SUPPORTED YET
   * @return the target element
   */
  //public final EventTarget getEventTarget() {
  //  return DOMImpl.impl.eventGetTarget(this);
  //}

  /**
   * Gets the key code (code associated with the physical key) associated with
   * this event.
   * NOT SUPPORTED YET
   * @return the key code
   * @see com.google.gwt.event.dom.client.KeyCodes
   */
  public final int getKeyCode() {
    return CurrentEventKeyCode;
  }

  /**
   * Gets whether the META key was depressed when the given event occurred.
   * NOT SUPPORTED YET
   * @return <code>true</code> if META was depressed when the event occurred
   */
  //public final boolean getMetaKey() {
   // return DOMImpl.impl.eventGetMetaKey(this);
  //}

  /**
   * Gets the velocity of the mouse wheel associated with the event along the Y
   * axis.
   * <p>
   * The velocity of the event is an artifical measurement for relative
   * comparisons of wheel activity. It is affected by some non-browser factors,
   * including choice of input hardware and mouse acceleration settings. The
   * sign of the velocity measurement agrees with the screen coordinate system;
   * negative values are towards the origin and positive values are away from
   * the origin. Standard scrolling speed is approximately ten units per event.
   * </p>
   * NOT SUPPORTED YET
   * @return The velocity of the mouse wheel.
   */
 // public final int getMouseWheelVelocityY() {
 //   return DOMImpl.impl.eventGetMouseWheelVelocityY(this);
 // }

  /**
   * Gets the related target for this event.
   * NOT SUPPORTED YET
   * @return the related target
   */
 // public final EventTarget getRelatedEventTarget() {
  //  return DOMImpl.impl.eventGetRelatedTarget(this);
  //}

  /**
   * Get the rotation in degrees, with positive values indicating clockwise rotation.
   * NOT SUPPORTED YET
   * @return the rotation in degrees since the gesture started
   */
  //public final double getRotation() {
  //  return DOMImpl.impl.eventGetRotation(this);
  //}

  /**
   * Get the amount scaled since the gesture started, with 1.0 representing no scaling.
   * NOT SUPPORTED YET
   * @return the amount scaled since the gesture started
   */
 // public final double getScale() {
  //  return DOMImpl.impl.eventGetScale(this);
  //}

  /**
   * Gets the mouse x-position on the user's display.
   * NOT SUPPORTED YET
   * @return the mouse x-position
   */
  public final int getScreenX() {
    return 0;
  }

  /**
   * Gets the mouse y-position on the user's display.
   * 
   * @return the mouse y-position
   */
  public final int getScreenY() {
    return 0;
  }

  /**
   * Gets whether the shift key was depressed when the given event occurred.
   * 
   * @return <code>true</code> if shift was depressed when the event occurred
   */
  public final boolean getShiftKey() {
    return this.ShiftKeyWasPressed;
  }

  /**
   * Gets a string representation of this event.
   * 
   * We do not override {@link #toString()} because it is final in
   * {@link com.google.gwt.core.client.JavaScriptObject }.
   * NOT SUPPORTED YET
   * @return the string representation of this event
   */
  public final String getString() {
    return "String discription of event not supported yet";
  }

  /**
   * Get an array of touches which have changed since the last touch event.
   * NOT SUPPORTED YET
   * @return array of touches which have changed since the last touch event
   */
  //public final JsArray<Touch> getTargetTouches() {
  //  return DOMImpl.impl.getTargetTouches(this);
  //}

  /**
   * Get an array of touches which have changed since the last touch event.
   * NOT SUPPORTED YET
   * @return array of touches which have changed since the last touch event
   */
  ////public final JsArray<Touch> getTouches() {
  //  return DOMImpl.impl.getTouches(this);
  //}

  /**
   * Gets the enumerated type of this event.
   * NOT SUPPORTED YET
   * @return the event's enumerated type
   */
  //public final String getType() {
  //  return DOMImpl.impl.eventGetType(this);
  //}

  /**
   * Prevents the browser from taking its default action for the given event.
   * NOT SUPPORTED YET (and will never be - there is no default)
   */
  //public final void preventDefault() {
  //  DOMImpl.impl.eventPreventDefault(this);
  //}

  /**
   * Stops the event from being propagated to parent elements.
   */
 // public final void stopPropagation() {
 //   DOMImpl.impl.eventStopPropagation(this);
 // }
}
